#!/bin/bash

##    Copyright (C) 2012, Francesco Di Nardo
##    If you have any questions or report me a bug,
##    contact me: francdin@gmail.com

##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.

##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.

##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#===============================================================================
#    UEDIT:
#    You can edit a command, if and only if it's in your PATH, or in your work
#    dir, and it is a text file. I use this script to modify my scripts
#    that are in the path, without write the enteir path.
#
#    BASH-COMPLETION RULE:
#    This script has a bash-completion rule, it complete the argoument
#    searching in your PATH and in your work dir.
#
#===============================================================================

#=====================================================
# Check for packages dependences.
# Exit if one or more packages are not installed
#
function _check_dependencies {
    local dependences=("$@")
    local exceptions=();
    for i in ${dependences[@]}; do
		type ${i} >/dev/null 2>&1 || exceptions+=(${i})
    done
    if [ ${#exceptions[@]} -eq 1 ]; then
        echo "Package ${exceptions[0]} is missing. Exit..."
        exit 1
    elif [ ${#exceptions[@]} -gt 1 ]; then
        echo "Packages ${exceptions[*]} are missing. Exit..."
        exit 1
    fi
}

#=====================================================
# function:choesEditor
# Ask the user's preferred editor (by default is vim)
# TODO: Think to use xdg-open instad of overwrite EDITOR env vbl
#
function _chose_editor {
	local MY_EDITOR=${EDITOR}
	read CHOOSE
	if [[ $CHOOSE == 2 ]]; then
		MY_EDITOR=$(type -P gedit)
	fi
	echo ${MY_EDITOR}
}

#=====================================================
function _print_menu {
	echo "Choose Editor:"
	echo "[1] vim (default)"
	echo "[2] gedit"
	echo -n ">> "
}

#=====================================================
# Check validate call uedit
#
function _check_valid_opts {
	# Check if no argument is provided
	if [[ $# < 1 ]]; then
		echo "ATTENTION: no argoumet!"
		echo "USAGE: uedit 'name of command'"
		exit 1
	fi
	# Check if more than one argument is provided
	if [[ $# > 1 ]]; then
		echo "ATTENTION: The argoument must be only one."
		echo "Argoument numbers: $#"
		echo "USAGE: uedit 'name of command'"
		exit 1
	fi

}

#=====================================================
# Get the file path if existes, otherwise returns
# the argument.
#
function _get_file_path {
	# Check if the file is in the current work dir (pwd)
	local file=$1
	if [ -f ${file} ]; then
		local result=$(readlink -f ${file})
	elif type -P ${file} >/dev/null 2>&1; then
	# find the absoulte path of the file.
		local result=$(type -P ${file})
	else
		local result=""
	fi
	echo "$result"
}

#=====================================================
# Check if it is a text file.
# Returns true if it is,
# false otherwise
#
function _is_text_file {
	# Check if it is a text file.
	local TYPE=$(file --mime-type ${1} | cut -d" " -f2 | cut -d/ -f1)
	if [[ $TYPE = "text" ]]; then
		echo "true"
	else
		echo "false"
	fi
}

#=====================================================
# Open File using MY_EDITOR and check if it needs
# SUDO for vim or GKSUDO for gedit
# NOTE: CHECK the form of editor, ex: vim or /usr/lib/vim
function _open_file_with {
	local editor=$1
	local file=$2

	if [[ ${editor} != "$(type -P vim)" ]]; then
		_open_file_with_gui $editor $file
	else
		_open_file_with_cli $editor $file
	fi
}

#=====================================================
# Open a file using the gui (gedit or kate or others)
# It checks for superuser permissions also
# TODO Notice the user that the file needs superuser
#      permissions
#
# TODO Try to make it gui editor agnostics
#
function _open_file_with_gui {
	local editor=$1
	local file=$2

	if [[ -w ${file} ]];then
		${editor} ${file} >/dev/null 2>&1 &
	else
		gksudo ${editor} ${file} >/dev/null 2>&1 &
	fi
}

#=====================================================
# Open a file using the cli (vim or vi or emacs)
# It checks for superuser permissions also.
# TODO Notice the user that the file needs superuser
#      permissions
#
function _open_file_with_cli {
	local editor=$1
	local file=$2

	if [[ -w ${file} ]];then
		${editor} ${file}
	else
		sudo ${editor} ${file}
	fi
}

#============================== MAIN ===========================================
_check_dependencies "vim" "gedit" "sudo" "gksudo"

_check_valid_opts $@

FILEPATH=$(_get_file_path $1)
if [[ ! $? -eq 0 || -z ${FILEPATH} ]] ; then
	echo "Unable to find ${1} 's path."
	echo "Exit..."
	exit 1
fi

IS_TEXT=$(_is_text_file ${FILEPATH})
if [[ ${IS_TEXT} = "false" ]]; then
	echo "The type of ${1} is $TYPE."
	echo "You can modify only text files."
	exit 1
fi

_print_menu
MY_EDITOR=$(_chose_editor ${FILEPATH})

_open_file_with ${MY_EDITOR} ${FILEPATH}

echo "Absoulte path: ${FILEPATH} | opened with $(basename $MY_EDITOR)."

exit 0
