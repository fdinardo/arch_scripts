#!/bin/bash

##    Copyright (C) 2012, Francesco Di Nardo
##    If you have any questions or report me a bug,
##    contact me: francdin@gmail.com

##    This program is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.

##    This program is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.

##    You should have received a copy of the GNU General Public License
##    along with this program.  If not, see <http://www.gnu.org/licenses/>.

#===============================================================================
#    UEDIT:
#    You can edit a command, if and only if it's in your PATH, or in your work 
#    dir, and it is a text file. I use this script to modify my scripts 
#    that are in the path, without write the enteir path.
#
#    BASH-COMPLETION RULE:
#    This script has a bash-completion rule, it complete the argoument
#    searching in your PATH and in your work dir.
#
#===============================================================================

#=====================================================
# function:choesEditor
# Ask the user's preferred editor (by default is vim)
# TODO: Think to use xdg-open instad of overwrite EDITOR env vbl
#
function choseEditor {
	EDITOR=$EDITOR
	echo "Choose Editor:"
	echo "[1] $(basename $EDITOR) (default)"
	echo "[2] gedit"
	echo -n ">> "
	read CHOOSE

	if [[ $CHOOSE == 2 ]]; then
		EDITOR='gedit'
	fi
	echo "Absoulte path: ${1} | opened with $(basename $EDITOR)."
}

#=====================================================
# Check for packages dependences.
# Exit if one or more packages are not installed
#
function _check_dependencies {
    local dependences=("$@")
    local exceptions=();
    for i in ${dependences[@]}; do
		type ${i} >/dev/null 2>&1 || exceptions+=(${i})
    done
    if [ ${#exceptions[@]} -eq 1 ]; then
        echo "Package ${exceptions[0]} is missing. Exit..."
        exit 1
    elif [ ${#exceptions[@]} -gt 1 ]; then
        echo "Packages ${exceptions[*]} are missing. Exit..."
        exit 1
    fi
}

#=====================================================
# Check validate call uedit
#
function _check_valid_opts {
	# Check if no argument is provided
	if [[ $# < 1 ]]; then
		echo "ATTENTION: no argoumet!"
		echo "USAGE: uedit 'name of command'"
		exit 1
	fi
	# Check if more than one argument is provided
	if [[ $# > 1 ]]; then
		echo "ATTENTION: The argoument must be only one."
		echo "Argoument numbers: $#"
		echo "USAGE: uedit 'name of command'"
		exit 1
	fi

}

#=====================================================
# Get the file path if existes, otherwise returns
# the argument.
#
function _get_file_path {
	# Check if the file is in the current work dir (pwd)
	if [ -f ${1} ]; then
		local RESULT=${1}
	else
	# find the absoulte path of the file.
		if type -P ${1} >/dev/null 2>&1; then
			local RESULT=$(type -P ${1})
		else
			exit 1
		fi
	fi
	echo "$RESULT"
}

#=====================================================
# Open the file iff it is a text file.
# Otherwise print an error and exit.
#
function _open_file {
	# Check if it is a text file.
	local TYPE=$(file --mime-type ${2} | cut -d" " -f2 | cut -d/ -f1)
	if [[ $TYPE = "text" ]]; then
		choseEditor ${2}
		if [[ $EDITOR == 'gedit' ]]; then
			$EDITOR ${2} &
		else
			$EDITOR ${2}
		fi
	else
		echo "The type of ${1} is $TYPE."
		echo "You can modify only text files."
	fi
}

#============================== MAIN ===========================================
# TODO: Refactoring prints in functions
_check_dependencies "vim" "gedit"
_check_valid_opts $@

FILEPATH=$(_get_file_path $1)
if [ ! $? -eq 0 ] ; then
	echo "Unable to find ${1} 's path. Exit..."
	exit 1
fi
_open_file ${1} $FILEPATH

exit 0
