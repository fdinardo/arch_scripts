#!/bin/bash
# Switch dpi config of gnome
# if the monitor not is hidpi
#
# @OPTION:
# -s|--scale-factor (Value):
#             Value = 1 | hd;    Will set the scaling for FullHD resolution
#             Value = 2 | hidpi; Will set the scaling for HIDPI resolution
#
# -r|--restart-gnome :
#             This option allow the gnome-shell restart
#
# -w|--wait (seconds):
#             seconds = time to wait until gnome-shell restart.
#             This to avoid the bad initialization of Nautilus (not display icons on desktop)
# ===========================================================================================
# argouments:		the value of scaling (1 or 2)
# usage: 			$0 [1|2]
# author			francdin@gmail.com
# license:    GPL
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ============================================================================================

# Check the input (String || number) and return appropiate value
_check_input() {
	INPUT=$1;

	# If the input is numeric or not provided
	if [ -z $INPUT ] || [ "$INPUT" == "1" ] || [ "$INPUT" == "2" ];
	then
		echo $INPUT
		return
	fi

	# If the input is provided as string
	if [[ "${INPUT,,}" == "hd" ]]
	then
		echo 1
		return
	elif [[ "${INPUT,,}" == "hidpi" ]]
	then
		echo 2
		return
	else
		echo 0 # String not recognized return error flag
		return
	fi
}

# Print usage of the script
# TODO: add --version to print script's version
_print_usage() {
	echo "USAGE: hidpi-switch [<option> ...] [<value> ...]"
	echo -e "\n\t-s| --scale-factor (Value):"
	echo -e "\t\tvalue 1 or hd    = FullHD <= (1920x1080)"
	echo -e "\t\tvalue 2 od hidpi = HIDPI  >  (1920x1080)\n"
	echo -e "\t-r| --restart-gnome:"
	echo -e "\t\tThis option allow the gnome-shell restart\n"
	echo -e "\t-w| --wait (seconds):"
	echo -e "\t\tseconds = number of seconds to wait before restart gnome-shell if -r is provided. Default = 3seconds"
	echo -e "\t\tThis is to avoid the bad initialization of Nautilus (not display icons on desktop).\n"
	echo -e "\t-h| --help:"
	echo -e "\t\tPrint this info.\n"
	echo -e "\t-ff| --firefox:"
	echo -e "\t\tSet a configuration file for firefox to reflect changes"
}

# Helper for check the value of $?
# @return true if $? = 0 else false
_cmd_in_bg_status() {
	if [ -n "$1" ];then
		nohup $1 </dev/null &>/dev/null &
	fi
	echo "$?";
}

# Print an error related to wrong args
# @RETURN nothing
_print_error_args() {
	echo "> $1 : No available value of scaling."
	echo "> The value is an integer between 1 and 2 included"
	echo
	_print_usage
}

# Print a msg related to the action to set the same value set yet
_print_msg_scale_already_set() {
	if [ $1 -eq 1 ];
	then
		SCALE_F="FULL HD"
	elif [ $1 -eq 2 ];
	then
		SCALE_F="HIDPI"
	fi

	echo "Gnome-shell is already setted on $SCALE_F"
	echo "Nothing to do!"
}

_restart_gnome_shell() {
	echo -ne "Restarting gnome-shell... "

	if [ $(_cmd_in_bg_status "gnome-shell -r") -eq 0 ];
	then
		echo "OK"
	else
		echo "ERROR"
	fi
}

_restart_nautilus() {
	echo -ne "Restarting nautilus... "

	# Quit nautilus
	kill $(pidof nautilus-desktop) &> /dev/null;

	# Run Nautilus in BG
	if [ $(_cmd_in_bg_status "/usr/bin/nautilus-desktop") -eq 0 ];
	then
		echo "OK"
	else
		echo " ERROR nautilus restart"
	fi
}

_set_firefox_scale_factor() {
	FF_DIR=$HOME/.mozilla/firefox/;
	FF_RAND_DIR=$(basename $HOME/.mozilla/firefox/*.default*);
	echo 'user_pref("layout.css.devPixelsPerPx", "'$1'");' > $FF_DIR$FF_RAND_DIR/user.js

	if [ $? -eq 0 ];
	then
		echo "Firefox scaling set to: $1";
	else
		echo "ERROR: Unable to set the scaling factor for FIREFOX"
		echo "Please check your [$FF_DIR$FF_RAND_DIR/user.js] file."
	fi
}

#===============================================================================================
#
# Main
#
#===============================================================================================

# Check num arguments and set VAL
if [[ $# == 0 ]]; then
	VAL=""
fi
# Set default time to wait before restart gnome-shell
MYWAIT=3
FORCE=false
FF=false
RESTARTGNOME=false

while [[ $# > 0 ]]
do
	key="$1"

	case $key in
		-r|--restart-gnome)
			RESTARTGNOME=true
			;;
		-s|--scale-factor)
			VAL=$(_check_input "$2")
			if  [ -n "$VAL" ] && [ "$VAL" -eq 0 ]
			then
				_print_error_args "$key"
				exit -1
			fi
			shift # past argument
			;;
		-w|--wait)
			MYWAIT="$2"
			shift # past argument
			;;
		-f|--force)
			FORCE=true
			;;
		-h|--help)
			_print_usage
			exit 0
			;;
			#Example
			#    -l|--lib)
			#      LIBPATH="$2"
			#      shift # past argument
			#      ;;
		-ff|--firefox)
			FF=true
			;;
		*)
			# unknown option
			_print_error_args "$1"
			exit -1
			;;
	esac
	shift # past argument or value
done

ACTUAL_VAL=$(gsettings get org.gnome.settings-daemon.plugins.xsettings overrides | cut -d '<' -f2 | cut -d '>' -f1);

# If VAL is not an empty string
if [ -n "$VAL" ];
then
	if [ "$VAL" -eq $ACTUAL_VAL ] && [ "$FORCE" != "true" ] ;
	then
		_print_msg_scale_already_set "$VAL"
		exit 0
	elif [ "$VAL" -gt 2 ] || [ "$VAL" -lt 1 ];
	then
		# else check the input argoument
		_print_error_args "$VAL"
		exit -1
	fi
elif [ -z "$VAL" ];
then
	# Else the user not provide the scaling value,
	# then set the opposite of the current value
	if [ $ACTUAL_VAL -eq 1 ];
	then
		VAL=2
	else
		VAL=1
	fi
else
	echo Unknown error!
	exit -1
fi

# Set scaling factor
if [ "$VAL" -eq 1 ];
then
	SCALING_FACTOR="FULL HD <= (1920x1080)"
else
	SCALING_FACTOR="HIDPI > (1920x1080)"
fi

# set the value VAL in WindowScalingFactor (for GTK)
# and set scaling-factor (for gnome-shell)
gsettings set org.gnome.settings-daemon.plugins.xsettings overrides "{'Gdk/WindowScalingFactor': <$VAL>}"
gsettings set org.gnome.desktop.interface scaling-factor "$VAL"

# Setting firefox scaling adding user.js file in firefox_dir
if $FF; then
	_set_firefox_scale_factor "$VAL";
fi

# Restart gnome-shell
if $RESTARTGNOME; then
	sleep "${MYWAIT}"
	_restart_gnome_shell
fi

# Restart nautilus
_restart_nautilus

# Show final message
echo
echo ">>>>> The Scaling factor is now set @ $SCALING_FACTOR ."
